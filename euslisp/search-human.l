(load "package://pr2eus/pr2-interface.l")
(ros::roseus-add-msgs "jsk_recognition_msgs")

(unless (boundp '*tfl*)
  (setq *tfl* (instance ros::transform-listener :init)))

(defun wait-for-human ()
  (let ((people-pose-array nil)
        (topic-name "/edgetpu_human_pose_estimator/output/poses_3d")
        (base-link "/base_link") camera-link stamp)
    (ros::subscribe topic-name jsk_recognition_msgs::PeoplePoseArray
                    #'(lambda (msg)
                        (ros::ros-info "sub")
                        (setq people-pose-array (send msg :poses))
                        (setq stamp (send msg :header :stamp))
                        (setq camera-link (send msg :header :frame_id))))
    (block get-coords
      (loop
        (unless (null people-pose-array)
          (dolist (people-pose people-pose-array)
            (let ((joint-poses (send people-pose :poses))
                  (limb-names (send people-pose :limb_names)))
              (dotimes (i (length limb-names))
                (let ((joint (elt joint-poses i))
                      (limb (elt limb-names i)))
                  (when (string-equal limb "nose")
                    (setq nose-coords (ros::tf-pose->coords joint))
                    (setq base2camera (send *tfl* :lookup-transform base-link camera-link stamp))
                    (setq base2nose (send base2camera :transform nose-coords))
                    (setq nose-pos (send base2nose :pos))
                    (ros::ros-info "x: ~A y: ~A" (elt nose-pos 0) (elt nose-pos 1))
                    (when (and (< (elt nose-pos 0) 600) (< (elt nose-pos 1) 150))
                      (return-from get-coords))))))))
        (ros::spin-once)))
    (ros::unsubscribe topic-name)
    ))
