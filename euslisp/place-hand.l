(load "package://pr2eus/pr2-interface.l")
(ros::roseus-add-msgs "jsk_recognition_msgs")

(when (boundp '*tfl*)
  (setq *tfl* (instance ros::transform-listener :init)))

(defun median (lst)
  (let* ((len (length lst))
         (center (round (/ len 2))))
    (sort lst #'<)
    (elt lst center)))

(defun calc-hand-coords (poses)
  (let (x-list y-list z-list)
    (dolist (pose poses)
      (push (send (send pose :position) :x) x-list)
      (push (send (send pose :position) :y) y-list)
      (push (send (send pose :position) :z) z-list))
    (make-coords :pos (float-vector (* 1000 (median x-list))
                                    (* 1000 (median y-list))
                                    (* 1000 (median z-list))))))

(defun look-at-hand (&key (wait t))
  (send *pr2* :head_pan_joint :joint-angle -77.96)
  (send *pr2* :head_tilt_joint :joint-angle 54.86)
  (send *ri* :angle-vector (send *pr2* :angle-vector) 2500 :head-controller 0 :minjerk-interpolation t)
  (when wait
    (send *ri* :wait-interpolation))  
  )

(defun look-at-front (&key (wait t))
  (send *pr2* :head_pan_joint :joint-angle 0)
  (send *pr2* :head_tilt_joint :joint-angle 20)
  (send *ri* :angle-vector (send *pr2* :angle-vector) 2500 :head-controller 0 :minjerk-interpolation t)
  (when wait
    (send *ri* :wait-interpolation))
  )

(defun search-hand (timeout)
  (let ((hand-pose-array nil) (start-tm (ros::time-now)) (target-coords nil)
        (topic-name "/kinect_head/rgb/hand_pose_estimation/output/pose_3d")
        (base-link "/base_link") camera-link stamp)
    (ros::subscribe topic-name jsk_recognition_msgs::PeoplePoseArray
                    #'(lambda (msg)
                        (ros::ros-info "sub")
                        (setq hand-pose-array (send msg :poses))
                        (setq stamp (send msg :header :stamp))
                        (setq camera-link (send msg :header :frame_id))))
    (block get-coords
      (loop
        (when (> (send (ros::time- (ros::time-now) start-tm) :to-sec) timeout)
          (ros::ros-info "timeout")
          (return))
        (unless (null hand-pose-array)
          (dolist (hand-pose hand-pose-array)
            (let ((finger-poses (send hand-pose :poses)))
              (when (> (length finger-poses) 5)
                (setq hand-coords (calc-hand-coords finger-poses))
                (setq coords (send *tfl* :lookup-transform base-link camera-link stamp))
                (setq target-coords (send coords :transform hand-coords))
                (send target-coords :replace-rot (rpy-matrix (deg2rad -20) 0 (deg2rad 180)))
                (return-from get-coords)))))
        (ros::spin-once)))
    (ros::unsubscribe topic-name)
    target-coords))

(defun place-hand (tgt)
  (setq ik-tgt (send (send tgt :copy-worldcoords) :translate #f(0 0 250) :world))
  (setq *b* (arrow))
  (send *b* :newcoords ik-tgt)
  (objects (list *pr2* *a* *b*))
  (when (null (send *pr2* :rarm :inverse-kinematics ik-tgt :rotation-axis :z))
    (return-from place-hand nil))
  (send *ri* :angle-vector (send *pr2* :angle-vector) 3500 :rarm-controller 0 :minjerk-interpolation t)
  )

(defun rarm-init-pose ()
  (send *pr2* :r_shoulder_pan_joint :joint-angle -120.9)
  (send *pr2* :r_shoulder_lift_joint :joint-angle 74.23)
  (send *pr2* :r_upper_arm_roll_joint :joint-angle -109)
  (send *pr2* :r_elbow_flex_joint :joint-angle -121.5)
  (send *pr2* :r_forearm_roll_joint :joint-angle -57.74)
  ;; (send *pr2* :r_wrist_roll_joint :joint-angle 350)
  (send *pr2* :r_wrist_flex_joint :joint-angle -72.37)
  (send *ri* :angle-vector (send *pr2* :angle-vector) 3500 :rarm-controller 0 :minjerk-interpolation t))


(load "models/arrow-object.l")
(pr2-init)
(pr2-tuckarm-pose :free-arm :rarm)
(rarm-init-pose)
(unix::sleep 4)
(setq *a* (arrow))
(look-at-hand)
(setq target (search-hand 15))
(send *a* :newcoords target)
(unless (null target)
  (look-at-front :wait nil)
  (place-hand target))



