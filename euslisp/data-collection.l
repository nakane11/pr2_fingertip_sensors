(load "package://pr2eus/pr2-interface.l")

(defun stroke-vertical()
  (setq d (+ 50 (random 100)))
  (format t "~A" d)
  (setq time (* d 30 (+ 0.4 (random 1.0))))
  (setq target-coords (send (send *pr2* :rarm :end-coords :copy-worldcoords) :translate (float-vector 0 0 d) :world))
  (send *pr2* :rarm :inverse-kinematics target-coords)
  (send *ri* :angle-vector (send *pr2* :angle-vector) time :rarm-controller 0 :minjerk-interpolation nil)
  (send *ri* :wait-interpolation)

  (setq time (* d 30 (+ 1.0 (random 1.0))))
  (setq target-coords (send (send *pr2* :rarm :end-coords :copy-worldcoords) :translate (float-vector 0 0 (- d)) :world))
  (send *pr2* :rarm :inverse-kinematics target-coords)
  (send *ri* :angle-vector (send *pr2* :angle-vector) time :rarm-controller 0 :minjerk-interpolation nil)
  (send *ri* :wait-interpolation)
)

(pr2-init)
(setq target-coords (send *pr2* :rarm :end-coords :copy-worldcoords))
(send target-coords :replace-rot (rpy-matrix 0 (deg2rad 90) (deg2rad 200)))
(send *pr2* :rarm :inverse-kinematics target-coords)
(send *ri* :angle-vector (send *pr2* :angle-vector) 1000 :rarm-controller 0 :minjerk-interpolation t)
(dotimes (i 10)
  (stroke-hand)
  (ros::ros-info "~A" i))
